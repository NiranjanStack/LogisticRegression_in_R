exp(cbind(OR = coef(logit1), confint(logit1)))
#Logistic Regression Model to predict admission into graduate school
#library(aod)
library(ggplot2)
library(Rcpp)
setwd("F:/Dropbox/NiranjanStack/Student-Admission-Prediction-R")
data1 <- read.csv("dataset.csv")
head(data1)
summary(data1)
sapply(data1, sd)
xtabs(~ admit + rank, data = data1)
data1$V1 <- factor(data1$rank)
logit1 <- glm(admit ~ gre + gpa + rank, data = data1, family = "binomial")
summary(logit1)
## CIs using profiled log-likelihood
confint(logit1)
## CIs using standard errors
confint.default(logit1)
##wald.test(b = coef(logit1), Sigma = vcov(logit1), Terms = 4:6)
##l <- cbind(0,0,0,1,-1,0)
##wald.test(b = coef(logit1), Sigma = vcov(logit1), L = l)
## odds ratios only
exp(coef(mylogit))
## odds ratios and 95% CI
exp(cbind(OR = coef(logit1), confint(logit1)))
#data2 <- with(data1, data.frame(gre = mean(gre), gpa = mean(gpa), rank = factor(1:10)))
#Predict probability of admission at each rank value from 1 to 10
data2 <- with(data1, data.frame(gre = mean(gre), gpa = mean(gpa), rank = (1:10)))
#Predicting values based on analysis of logit1 with data2 and  predicted probability type response.
#predicting probability of acceptance into program
data2$rank_predicted <- predict(logit1, newdata = data2, type = "response")
#Creating 100 values of gre between 200 and 800, at each value of rank from 1 to 10.
data3 <- with(data1,data.frame(gre = rep(seq(from = 200, to = 800, length.out = 100), 10),
gpa = mean(gpa), rank = rep(1:10, each = 100)))
#Getting standard errors to plot confidence interval
data4 <- cbind(data3, predict(logit1, newdata = data3, type="link", se=TRUE))
#head(data4)
#summary(data4)
#Estimating the link scale and back transform both the predicted values and confidence limits into probabilities
data4 <- within(data4, {
PredictedProb <- plogis(fit)
LL <- plogis(fit - (1.96 * se.fit))
UL <- plogis(fit + (1.96 * se.fit))
})
#ggplot(data4, aes(x = gre, y = PredictedProb)) +
#geom_ribbon(aes(ymin = LL, ymax = UL, fill = rank), alpha = .2) +
#  geom_line(aes(colour = rank), size=1)
#Plot with the predicted probabilities
ggplot(data4, aes(x = gre, y = PredictedProb)) +
geom_ribbon(aes(ymin = LL, ymax = UL, filled.contour = rank),  alpha = .2) +
geom_line(aes(colour = rank), size=2)
#Logistic Regression Model to predict admission into graduate school
library(aod)
library(ggplot2)
library(Rcpp)
setwd("F:/Dropbox/NiranjanStack/Student-Admission-Prediction-R")
data1 <- read.csv("dataset.csv")
head(data1)
summary(data1)
sapply(data1, sd)
xtabs(~ admit + rank, data = data1)
data1$V1 <- factor(data1$rank)
logit1 <- glm(admit ~ gre + gpa + rank, data = data1, family = "binomial")
summary(logit1)
## CIs using profiled log-likelihood
confint(logit1)
## CIs using standard errors
confint.default(logit1)
##wald.test(b = coef(logit1), Sigma = vcov(logit1), Terms = 4:6)
##l <- cbind(0,0,0,1,-1,0)
##wald.test(b = coef(logit1), Sigma = vcov(logit1), L = l)
## odds ratios only
exp(coef(mylogit))
## odds ratios and 95% CI
exp(cbind(OR = coef(logit1), confint(logit1)))
#data2 <- with(data1, data.frame(gre = mean(gre), gpa = mean(gpa), rank = factor(1:10)))
#Predict probability of admission at each rank value from 1 to 10
data2 <- with(data1, data.frame(gre = mean(gre), gpa = mean(gpa), rank = (1:10)))
#Predicting values based on analysis of logit1 with data2 and  predicted probability type response.
#predicting probability of acceptance into program
data2$rank_predicted <- predict(logit1, newdata = data2, type = "response")
#Creating 100 values of gre between 200 and 800, at each value of rank from 1 to 10.
data3 <- with(data1,data.frame(gre = rep(seq(from = 200, to = 800, length.out = 100), 10),
gpa = mean(gpa), rank = rep(1:10, each = 100)))
#Getting standard errors to plot confidence interval
data4 <- cbind(data3, predict(logit1, newdata = data3, type="link", se=TRUE))
#head(data4)
#summary(data4)
#Estimating the link scale and back transform both the predicted values and confidence limits into probabilities
data4 <- within(data4, {
PredictedProb <- plogis(fit)
LL <- plogis(fit - (1.96 * se.fit))
UL <- plogis(fit + (1.96 * se.fit))
})
#ggplot(data4, aes(x = gre, y = PredictedProb)) +
#geom_ribbon(aes(ymin = LL, ymax = UL, fill = rank), alpha = .2) +
#  geom_line(aes(colour = rank), size=1)
#Plot with the predicted probabilities
ggplot(data4, aes(x = gre, y = PredictedProb)) +
geom_ribbon(aes(ymin = LL, ymax = UL, filled.contour = rank),  alpha = .2) +
geom_line(aes(colour = rank), size=2)
#Logistic Regression Model to predict admission into graduate school
library(aod)
library(ggplot2)
library(Rcpp)
setwd("F:\Dropbox\NiranjanStack\LogisticRegression_in_R")
data1 <- read.csv("dataset.csv")
head(data1)
summary(data1)
sapply(data1, sd)
xtabs(~ admit + rank, data = data1)
data1$V1 <- factor(data1$rank)
logit1 <- glm(admit ~ gre + gpa + rank, data = data1, family = "binomial")
summary(logit1)
## CIs using profiled log-likelihood
confint(logit1)
## CIs using standard errors
confint.default(logit1)
##wald.test(b = coef(logit1), Sigma = vcov(logit1), Terms = 4:6)
##l <- cbind(0,0,0,1,-1,0)
##wald.test(b = coef(logit1), Sigma = vcov(logit1), L = l)
## odds ratios only
exp(coef(mylogit))
## odds ratios and 95% CI
exp(cbind(OR = coef(logit1), confint(logit1)))
#data2 <- with(data1, data.frame(gre = mean(gre), gpa = mean(gpa), rank = factor(1:10)))
#Predict probability of admission at each rank value from 1 to 10
data2 <- with(data1, data.frame(gre = mean(gre), gpa = mean(gpa), rank = (1:10)))
#Predicting values based on analysis of logit1 with data2 and  predicted probability type response.
#predicting probability of acceptance into program
data2$rank_predicted <- predict(logit1, newdata = data2, type = "response")
#Creating 100 values of gre between 200 and 800, at each value of rank from 1 to 10.
data3 <- with(data1,data.frame(gre = rep(seq(from = 200, to = 800, length.out = 100), 10),
gpa = mean(gpa), rank = rep(1:10, each = 100)))
#Getting standard errors to plot confidence interval
data4 <- cbind(data3, predict(logit1, newdata = data3, type="link", se=TRUE))
#head(data4)
#summary(data4)
#Estimating the link scale and back transform both the predicted values and confidence limits into probabilities
data4 <- within(data4, {
PredictedProb <- plogis(fit)
LL <- plogis(fit - (1.96 * se.fit))
UL <- plogis(fit + (1.96 * se.fit))
})
#ggplot(data4, aes(x = gre, y = PredictedProb)) +
#geom_ribbon(aes(ymin = LL, ymax = UL, fill = rank), alpha = .2) +
#  geom_line(aes(colour = rank), size=1)
#Plot with the predicted probabilities
ggplot(data4, aes(x = gre, y = PredictedProb)) +
geom_ribbon(aes(ymin = LL, ymax = UL, filled.contour = rank),  alpha = .2) +
geom_line(aes(colour = rank), size=2)
setwd("F:/Dropbox/NiranjanStack/LogisticRegression_in_R")
#Logistic Regression Model to predict admission into graduate school
#library(aod)
library(ggplot2)
library(Rcpp)
setwd("F:/Dropbox/NiranjanStack/LogisticRegression_in_R")
data1 <- read.csv("dataset.csv")
head(data1)
summary(data1)
sapply(data1, sd)
xtabs(~ admit + rank, data = data1)
data1$V1 <- factor(data1$rank)
logit1 <- glm(admit ~ gre + gpa + rank, data = data1, family = "binomial")
summary(logit1)
## CIs using profiled log-likelihood
confint(logit1)
## CIs using standard errors
confint.default(logit1)
##wald.test(b = coef(logit1), Sigma = vcov(logit1), Terms = 4:6)
##l <- cbind(0,0,0,1,-1,0)
##wald.test(b = coef(logit1), Sigma = vcov(logit1), L = l)
## odds ratios only
exp(coef(mylogit))
## odds ratios and 95% CI
exp(cbind(OR = coef(logit1), confint(logit1)))
#data2 <- with(data1, data.frame(gre = mean(gre), gpa = mean(gpa), rank = factor(1:10)))
#Predict probability of admission at each rank value from 1 to 10
data2 <- with(data1, data.frame(gre = mean(gre), gpa = mean(gpa), rank = (1:10)))
#Predicting values based on analysis of logit1 with data2 and  predicted probability type response.
#predicting probability of acceptance into program
data2$rank_predicted <- predict(logit1, newdata = data2, type = "response")
#Creating 100 values of gre between 200 and 800, at each value of rank from 1 to 10.
data3 <- with(data1,data.frame(gre = rep(seq(from = 200, to = 800, length.out = 100), 10),
gpa = mean(gpa), rank = rep(1:10, each = 100)))
#Getting standard errors to plot confidence interval
data4 <- cbind(data3, predict(logit1, newdata = data3, type="link", se=TRUE))
#head(data4)
#summary(data4)
#Estimating the link scale and back transform both the predicted values and confidence limits into probabilities
data4 <- within(data4, {
PredictedProb <- plogis(fit)
LL <- plogis(fit - (1.96 * se.fit))
UL <- plogis(fit + (1.96 * se.fit))
})
#ggplot(data4, aes(x = gre, y = PredictedProb)) +
#geom_ribbon(aes(ymin = LL, ymax = UL, fill = rank), alpha = .2) +
#  geom_line(aes(colour = rank), size=1)
#Plot with the predicted probabilities
ggplot(data4, aes(x = gre, y = PredictedProb)) +
geom_ribbon(aes(ymin = LL, ymax = UL, filled.contour = rank),  alpha = .2) +
geom_line(aes(colour = rank), size=2)
#Logistic Regression Model to predict admission into graduate school
#library(aod)
library(ggplot2)
library(Rcpp)
setwd("F:/Dropbox/NiranjanStack/LogisticRegression_in_R")
data1 <- read.csv("dataset.csv")
head(data1)
summary(data1)
sapply(data1, sd)
xtabs(~ admit + rank, data = data1)
data1$V1 <- factor(data1$rank)
logit1 <- glm(admit ~ gre + gpa + rank, data = data1, family = "binomial")
summary(logit1)
## CIs using profiled log-likelihood
confint(logit1)
## CIs using standard errors
confint.default(logit1)
##wald.test(b = coef(logit1), Sigma = vcov(logit1), Terms = 4:6)
##l <- cbind(0,0,0,1,-1,0)
##wald.test(b = coef(logit1), Sigma = vcov(logit1), L = l)
## odds ratios
exp(coef(logit1))
## odds ratios and 95% CI
exp(cbind(OR = coef(logit1), confint(logit1)))
#data2 <- with(data1, data.frame(gre = mean(gre), gpa = mean(gpa), rank = factor(1:10)))
#Predict probability of admission at each rank value from 1 to 10
data2 <- with(data1, data.frame(gre = mean(gre), gpa = mean(gpa), rank = (1:10)))
#Predicting values based on analysis of logit1 with data2 and  predicted probability type response.
#predicting probability of acceptance into program
data2$rank_predicted <- predict(logit1, newdata = data2, type = "response")
#Creating 100 values of gre between 200 and 800, at each value of rank from 1 to 10.
data3 <- with(data1,data.frame(gre = rep(seq(from = 200, to = 800, length.out = 100), 10),
gpa = mean(gpa), rank = rep(1:10, each = 100)))
#Getting standard errors to plot confidence interval
data4 <- cbind(data3, predict(logit1, newdata = data3, type="link", se=TRUE))
#head(data4)
#summary(data4)
#Estimating the link scale and back transform both the predicted values and confidence limits into probabilities
data4 <- within(data4, {
PredictedProb <- plogis(fit)
LL <- plogis(fit - (1.96 * se.fit))
UL <- plogis(fit + (1.96 * se.fit))
})
#ggplot(data4, aes(x = gre, y = PredictedProb)) +
#geom_ribbon(aes(ymin = LL, ymax = UL, fill = rank), alpha = .2) +
#  geom_line(aes(colour = rank), size=1)
#Plot with the predicted probabilities
ggplot(data4, aes(x = gre, y = PredictedProb)) +
geom_ribbon(aes(ymin = LL, ymax = UL, filled.contour = rank),  alpha = .2) +
geom_line(aes(colour = rank), size=2)
exp(coef(logit1))
exp(cbind(OR = coef(logit1), confint(logit1)))
#Logistic Regression Model to predict admission into graduate school
library(ggplot2)
library(Rcpp)
setwd("F:/Dropbox/NiranjanStack/LogisticRegression_in_R")
data1 <- read.csv("dataset.csv")
head(data1)
summary(data1)
sapply(data1, sd)
xtabs(~ admit + rank, data = data1)
data1$V1 <- factor(data1$rank)
logit1 <- glm(admit ~ gre + gpa + rank, data = data1, family = "binomial")
summary(logit1)
## CIs using profiled log-likelihood
confint(logit1)
## CIs using standard errors
confint.default(logit1)
##wald.test(b = coef(logit1), Sigma = vcov(logit1), Terms = 4:6)
##l <- cbind(0,0,0,1,-1,0)
##wald.test(b = coef(logit1), Sigma = vcov(logit1), L = l)
## odds ratios
exp(coef(logit1))
## odds ratios and 95% CI
exp(cbind(OR = coef(logit1), confint(logit1)))
#data2 <- with(data1, data.frame(gre = mean(gre), gpa = mean(gpa), rank = factor(1:10)))
#Predict probability of admission at each rank value from 1 to 10
data2 <- with(data1, data.frame(gre = mean(gre), gpa = mean(gpa), rank = (1:10)))
#Predicting values based on analysis of logit1 with data2 and  predicted probability type response.
#predicting probability of acceptance into program
data2$rank_predicted <- predict(logit1, newdata = data2, type = "response")
#Creating 100 values of gre between 200 and 800, at each value of rank from 1 to 10.
data3 <- with(data1,data.frame(gre = rep(seq(from = 200, to = 800, length.out = 100), 10),
gpa = mean(gpa), rank = rep(1:10, each = 100)))
#Getting standard errors to plot confidence interval
data4 <- cbind(data3, predict(logit1, newdata = data3, type="link", se=TRUE))
#head(data4)
#summary(data4)
#Estimating the link scale and back transform both the predicted values and confidence limits into probabilities
data4 <- within(data4, {
PredictedProb <- plogis(fit)
LL <- plogis(fit - (1.96 * se.fit))
UL <- plogis(fit + (1.96 * se.fit))
})
#ggplot(data4, aes(x = gre, y = PredictedProb)) +
#geom_ribbon(aes(ymin = LL, ymax = UL, fill = rank), alpha = .2) +
#  geom_line(aes(colour = rank), size=1)
#Plot with the predicted probabilities
ggplot(data4, aes(x = gre, y = PredictedProb)) +
geom_ribbon(aes(ymin = LL, ymax = UL, filled.contour = rank),  alpha = .2) +
geom_line(aes(colour = rank), size=2)
#Logistic Regression Model to predict admission into graduate school
library(ggplot2)
library(Rcpp)
setwd("F:/Dropbox/NiranjanStack/LogisticRegression_in_R")
data1 <- read.csv("dataset.csv")
head(data1)
summary(data1)
sapply(data1, sd)
xtabs(~ admit + rank, data = data1)
data1$V1 <- factor(data1$rank)
logit1 <- glm(admit ~ gre + gpa + rank, data = data1, family = "binomial")
summary(logit1)
## CIs using profiled log-likelihood
confint(logit1)
## CIs using standard errors
confint.default(logit1)
##wald.test(b = coef(logit1), Sigma = vcov(logit1), Terms = 4:6)
##l <- cbind(0,0,0,1,-1,0)
##wald.test(b = coef(logit1), Sigma = vcov(logit1), L = l)
## odds ratios
exp(coef(logit1))
## odds ratios and 95% CI
exp(cbind(OR = coef(logit1), confint(logit1)))
#data2 <- with(data1, data.frame(gre = mean(gre), gpa = mean(gpa), rank = factor(1:10)))
#Predict probability of admission at each rank value from 1 to 10
data2 <- with(data1, data.frame(gre = mean(gre), gpa = mean(gpa), rank = (1:10)))
#Predicting values based on analysis of logit1 with data2 and  predicted probability type response.
#predicting probability of acceptance into program
data2$rank_predicted <- predict(logit1, newdata = data2, type = "response")
#Creating 100 values of gre between 200 and 800, at each value of rank from 1 to 10.
data3 <- with(data1,data.frame(gre = rep(seq(from = 200, to = 800, length.out = 100), 10),
gpa = mean(gpa), rank = rep(1:10, each = 100)))
#Getting standard errors to plot confidence interval
data4 <- cbind(data3, predict(logit1, newdata = data3, type="link", se=TRUE))
#head(data4)
#summary(data4)
#Estimating the link scale and back transform both the predicted values and confidence limits into probabilities
data4 <- within(data4, {
PredictedProb <- plogis(fit)
LL <- plogis(fit - (1.96 * se.fit))
UL <- plogis(fit + (1.96 * se.fit))
})
#ggplot(data4, aes(x = gre, y = PredictedProb)) +
#geom_ribbon(aes(ymin = LL, ymax = UL, fill = rank), alpha = .2) +
#  geom_line(aes(colour = rank), size=1)
#Plot with the predicted probabilities
ggplot(data4, aes(x = gre, y = PredictedProb)) +
geom_ribbon(aes(ymin = LL, ymax = UL, filled.contour = rank),  alpha = .2) +
geom_line(aes(colour = rank), size=2)
#Logistic Regression Model to predict admission into graduate school
library(ggplot2)
library(Rcpp)
setwd("F:/Dropbox/NiranjanStack/LogisticRegression_in_R")
data1 <- read.csv("dataset.csv")
head(data1)
summary(data1)
sapply(data1, sd)
xtabs(~ admit + rank, data = data1)
data1$V1 <- factor(data1$rank)
logit1 <- glm(admit ~ gre + gpa + rank, data = data1, family = "binomial")
summary(logit1)
## CIs using profiled log-likelihood
confint(logit1)
## CIs using standard errors
confint.default(logit1)
##wald.test(b = coef(logit1), Sigma = vcov(logit1), Terms = 4:6)
##l <- cbind(0,0,0,1,-1,0)
##wald.test(b = coef(logit1), Sigma = vcov(logit1), L = l)
## odds ratios
exp(coef(logit1))
## odds ratios and 95% CI
exp(cbind(OR = coef(logit1), confint(logit1)))
#data2 <- with(data1, data.frame(gre = mean(gre), gpa = mean(gpa), rank = factor(1:10)))
#Predict probability of admission at each rank value from 1 to 10
data2 <- with(data1, data.frame(gre = mean(gre), gpa = mean(gpa), rank = (1:10)))
#Predicting values based on analysis of logit1 with data2 and  predicted probability type response.
#predicting probability of acceptance into program
data2$rank_predicted <- predict(logit1, newdata = data2, type = "response")
#Creating 100 values of gre between 200 and 800, at each value of rank from 1 to 10.
data3 <- with(data1,data.frame(gre = rep(seq(from = 200, to = 800, length.out = 100), 10),
gpa = mean(gpa), rank = rep(1:10, each = 100)))
#Getting standard errors to plot confidence interval
data4 <- cbind(data3, predict(logit1, newdata = data3, type="link", se=TRUE))
#head(data4)
#summary(data4)
#Estimating the link scale and back transform both the predicted values and confidence limits into probabilities
data4 <- within(data4, {
PredictedProb <- plogis(fit)
LL <- plogis(fit - (1.96 * se.fit))
UL <- plogis(fit + (1.96 * se.fit))
})
#ggplot(data4, aes(x = gre, y = PredictedProb)) +
#geom_ribbon(aes(ymin = LL, ymax = UL, fill = rank), alpha = .2) +
#  geom_line(aes(colour = rank), size=1)
#Plot with the predicted probabilities
ggplot(data4, aes(x = gre, y = PredictedProb)) +
geom_ribbon(aes(ymin = LL, ymax = UL, filled.contour = rank),  alpha = .2) +
geom_line(aes(colour = rank), size=2)
